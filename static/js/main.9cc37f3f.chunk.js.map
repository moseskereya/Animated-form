{"version":3,"sources":["Compoonents/Comp1.js","App.js","serviceWorker.js","index.js"],"names":["App","props","state","name","surName","Language","handleChange","bind","chageSurname","e","this","setState","target","value","className","type","onChange","src","alt","Component","top","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAgDeA,E,YA9CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAK,YACLC,QAAQ,UACRC,SAAS,wKAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARN,E,0EAUNE,GACTC,KAAKC,SAAS,CACVR,KAAKM,EAAEG,OAAOC,U,mCAITJ,GACTC,KAAKC,SAAS,CACVP,QAAQK,EAAEG,OAAOC,U,+BAKrB,OACG,yBAAKC,UAAU,YACX,yBAAKA,UAAU,aACf,2BAAOC,KAAK,GAAGZ,KAAK,GACpBU,MAAOH,KAAKR,MAAMC,KAClBa,SAAUN,KAAKJ,eACf,6BACA,2BAAOS,KAAK,GAAGZ,KAAK,GACpBa,SAAUN,KAAKF,aACfK,MAAOH,KAAKR,MAAME,UAClB,6BACA,0CACA,6BACI,yBAAKU,UAAU,MACnBG,IAAKP,KAAKR,MAAMG,SAAUa,IAAI,KAC9B,6BACA,4BAAQH,KAAK,IAAb,gB,GAxCGI,a,iBCuBHnB,G,kBAjBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAOf,OACI,kBAAC,IAAD,CAAOkB,KAAG,GACV,yBAAKN,UAAU,OACX,kBAAC,EAAD,Y,GAXEK,cCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9cc37f3f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            name:\"FirstName\",\r\n            surName:\"SurName\",\r\n            Language:\"https://media.istockphoto.com/photos/american-flag-textile-close-up-picture-id540983048?k=6&m=540983048&s=612x612&w=0&h=PFUMyunR23dd6BTdSbQAd00H85l22MxpJ9nQBcFkYsM=\"\r\n         }\r\n         this.handleChange = this.handleChange.bind(this)\r\n         this.chageSurname = this.chageSurname.bind(this)\r\n    }\r\n    handleChange(e){\r\n        this.setState({\r\n            name:e.target.value\r\n        })\r\n    }\r\n\r\n    chageSurname(e){\r\n        this.setState({\r\n            surName:e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n           <div className=\"App-form\">\r\n               <div className=\"App-inner\">\r\n               <input type=\"\" name=\"\" \r\n               value={this.state.name}\r\n               onChange={this.handleChange}/>\r\n               <br/>\r\n               <input type=\"\" name=\"\" \r\n               onChange={this.chageSurname}\r\n               value={this.state.surName}/>\r\n               <br/>\r\n               <span>Language</span>\r\n               <br/>\r\n                   <img className=\"img\"\r\n               src={this.state.Language} alt=\"\"/>\r\n               <br/>\r\n               <button type=\"\">Submit</button> \r\n               </div>\r\n           </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App;","import React, {Component} from 'react';\nimport App2 from \"./Compoonents/Comp1\"\n// import Reveal from 'react-reveal/Reveal';\nimport Slide from 'react-reveal/Slide';\n\nimport './App.css';\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n       \n        }\n    }\n    render() { \n        return ( \n            <Slide top>\n            <div className=\"App\">\n                <App2/>\n            </div>\n            </Slide>\n         );\n    }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}